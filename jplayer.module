<?php
/**
 * @file
 * Provides an HTML5-compatible with Flash-fallback audio player.
 *
 * This module provides functionality for loading the jPlayer library and
 * formatters for File Fields.
 */

/**
 * Implements hook_menu().
 */
function jplayer_menu() {
  $items = array();

  $items['admin/config/media/jplayer'] = array(
    'title' => 'jPlayer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jplayer_settings_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the settings for the jPlayer module.',
    'file' => 'includes/jplayer.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Define the plugin types defined by jplayer.
 *
 * @return array
 *  An array of plugin types, keyed by the type name.
 */
function jplayer_ctools_plugin_type() {
  $plugins['jplayer_skin'] = array();

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function jplayer_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'jplayer' && $plugin_type == 'jplayer_skin') {
    return 'plugins/jplayer_skin';
  }
  return NULL;
}

/**
 * Implements hook_views_api().
 */
function jplayer_views_api() {
  return array(
    'path' => drupal_get_path('module', 'jplayer') . '/includes',
    'api' => 3.0,
  );
}

/**
 * Implements hook_library().
 */
function jplayer_library() {
  $file = _jplayer_get_js();
  $version = jplayer_get_version($file);

  $libraries = array();
  $libraries['jplayer'] = array(
    'title' => 'jPlayer',
    'website' => 'http://www.jplayer.org',
    'version' => $version,
    'js' => array(
      $file => array(
        'type' => 'file',
        'scope' => 'footer',
        'group' => JS_LIBRARY,
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_theme().
 */
function jplayer_theme() {
  $base_template = array(
    // variant of item_list used for playlists
    'jplayer_item_list' => array(
      'render element' => 'element',
      'file' => 'includes/jplayer.theme.inc',
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      ),
    ),
    // Theme used when calling from Field display
    'jplayer_field' => array(
      'render element' => 'element',
      'file' => 'includes/jplayer.theme.inc',
      'function' => 'theme_jplayer_field',
    ),
    // Theme used when calling from Views plugin
    'jplayer_views' => array(
      'render element' => 'element',
      'file' => 'includes/jplayer.theme.inc',
      'function' => 'theme_jplayer_views',
    ),
  );

  return $base_template;
}

/**
 * Implements hook_field_formatter_info().
 */
function jplayer_field_formatter_info() {
  $skins = _jplayer_known_skins();
  if (!empty($skins)) {
    reset($skins);
    $default_skin = key($skins);
  }
  else {
    $default_skin = '- no skin -';
  }
  return array(
    'jplayer_player' => array(
      'label' => t('jPlayer - Player'),
      'field types' => array('file', 'text', 'link_field'),
      'description' => t('Display file fields as an HTML5-compatible with Flash-fallback media player.'),
      'settings' => array(
        'autoplay' => 0,
        'continuous' => 0,
        'solution' => 'html, flash',
        'preload' => 'none',
        'volume' => 80,
        'muted' => FALSE,
        'repeat' => 'none',
        'backgroundColor' => '000000',
        'mode' => 'playlist',
        'skin' => $default_skin,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function jplayer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'jplayer_player':
      if (!empty($items)) {

        $element[0] = array(
          'jplayer' => array(
            '#type' => 'theme',
            '#theme' => 'jplayer_field',
            '#entity_type' => $entity_type,
            '#entity' => $entity,
            '#field_name' => $instance['field_name'],
            '#items' => $items,
            '#settings' => $display['settings'],
          ),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function jplayer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  if ($display['type'] == 'jplayer_player') {
    $form['mode'] = array(
      '#title' => t('Kind'),
      '#type' => 'select',
      '#options' => array(
        'single' => t('Single'),
        'playlist' => t('Playlist'),
      ),
      '#default_value' => $settings['mode'],
    );

    $opts = array();
    $skins = _jplayer_known_skins();
    foreach ($skins as $id => $details) {
      $opts[$id] = $details['label'];
    }
    $form['skin'] = array(
      '#title' => t('Skin'),
      '#type' => 'select',
      '#options' => $opts,
      '#default_value' => $settings['skin'],
    );

    $form['continuous'] = array(
      '#title' => t('Continuous play'),
      '#type' => 'select',
      '#options' => array(
        0 => t('No'),
        1 => t('Yes'),
      ),
      '#description' => t('Play the next track in a playlist automatically.'),
      '#default_value' => $settings['continuous'],
      '#states' => array(
        'visible' => array(
          ':input[name="fields[field_audio][settings_edit_form][settings][mode]"]' => array('value' => 'playlist'),
        ),
      ),
    );

    $form['autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'select',
      '#options' => array(
        0 => t('No'),
        1 => t('Yes'),
      ),
      '#default_value' => $settings['autoplay'],
    );

    $form['solution'] = array(
      '#title' => t('Preferred solution'),
      '#type' => 'select',
      '#options' => array(
        'html, flash' => t('HTML5'),
        'flash, html' => t('Flash'),
      ),
      '#default_value' => $settings['solution'],
    );

    $form['preload'] = array(
      '#title' => t('Preload media'),
      '#type' => 'select',
      '#options' => array(
        'none' => t('No'),
        'metadata' => t('Only metadata'),
        'auto' => t('Yes'),
      ),
      '#description' => t("Preloading media before it's requested isn't available in all browsers."),
      '#default_value' => $settings['preload'],
    );

    $form['volume'] = array(
      '#title' => t('Initial volume'),
      '#type' => 'textfield',
      '#field_suffix' => '%',
      '#maxlength' => 3,
      '#size' => 3,
      '#default_value' => $settings['volume'],
      '#element_validate' => array('jplayer_volume_check'),
    );

    $form['muted'] = array(
      '#title' => t('Initially muted'),
      '#type' => 'select',
      '#options' => array(
        FALSE => t('No'),
        TRUE => t('Yes'),
      ),
      '#default_value' => $settings['muted'],
    );

    $form['repeat'] = array(
      '#title' => t('Repeat'),
      '#type' => 'select',
      '#options' => array(
        'all' => t('All'),
        'single' => t('Single'),
        'none' => t('None'),
      ),
      '#description' => t("For playlist players, it is suggested to enable Continuous play if setting Repeat to 'All'."),
      '#default_value' => $settings['repeat'],
    );

    $form['backgroundColor'] = array(
      '#title' => t('Background color'),
      '#type' => 'textfield',
      '#field_preffix' => '#',
      '#maxlength' => 6,
      '#size' => 6,
      '#default_value' => $settings['backgroundColor'],
    );
  }

  return $form;
}

/**
 * Element validation to check volume is between 0 and 100.
 */
function jplayer_volume_check($element, &$form_state) {
  $value = $element['#value'];

  if ($value < 0 || $value > 100) {
    form_set_error($element, t('Volume must be a percentage between 0% and 100%.'));
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jplayer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'jplayer_player') {
    if (isset($settings['autoplay']) && $settings['autoplay'] == 1) {
      $summary = t('Single jPlayer instance which autoplays.');
    }
    else {
      $summary = t('Single jPlayer instance.');
    }
  }

  return $summary;
}

/**
 * Return the version of jPlayer installed.
 *
 * @param string $file
 *   File path of jPlayer file.
 *
 * @return string|bool
 *   Version detected or FALSE.
 */
function jplayer_get_version($file = '') {
  if (!$file) {
    $file = _jplayer_get_js();
  }

  $contents = file_get_contents($file);

  // No file data. Run away.
  if (!$contents) {
    return FALSE;
  }

  $matches = array();
  $preg = '/Version:?[ ]*([\d.]+)/i';
  preg_match($preg, $contents, $matches);

  if (!isset($matches[1])) {
    // This style was used for minified versions.
    $preg = '/jPlayer ([\d.]+) for jQuery/';
    preg_match($preg, $contents, $matches);

    if (!isset($matches[1])) {
      return FALSE;
    }
  }
  return $matches[1];
}

/**
 * Add core JS and CSS needed for jPlayer instances.
 *
 * @return array
 *   Form API attach.
 */
function _jplayer_js_attach($skin) {
  $added = &drupal_static(__FUNCTION__, FALSE);
  if ($added) {
    // JS is already loaded.
    return array();
  }

  // Add global settings.
  $settings = array(
    'jPlayer' => array(
      'swfPath' => _jplayer_get_swf(),
      'showHour' => (boolean) variable_get('jplayer_showHour', FALSE),
      'showMin' => (boolean) variable_get('jplayer_showMin', TRUE),
      'showSec' => (boolean) variable_get('jplayer_showSec', TRUE),
      'padHour' => (boolean) variable_get('jplayer_padHour', FALSE),
      'padMin' => (boolean) variable_get('jplayer_padMin', TRUE),
      'padSec' => (boolean) variable_get('jplayer_padSec', TRUE),
      'sepHour' => variable_get('jplayer_sepHour', ':'),
      'sepMin' => variable_get('jplayer_sepMin', ':'),
      'sepSec' => variable_get('jplayer_sepSec', ''),
    ),
  );
  drupal_add_js($settings, array('type' => 'setting'));

  $path = drupal_get_path('module', 'jplayer');
  $return = array(
    '#attached' => array(
      // Base library.
      'library' => array(
        array('jplayer', 'jplayer'),
      ),
      // Drupal specific JS.
      'js' => array(
        $path . '/theme/jplayer.js' => array(
          'type' => 'file',
          'scope' => 'footer',
          'group' => JS_DEFAULT,
        ),
      ),
      // CSS of skin.
      'css' => _jplayer_get_css($skin),
    ),
  );

  // Allow other modules to add resources to the page when a jPlayer is
  // embedded.
  if ($additional_resources = module_invoke_all('jplayer_add_resource', $return)) {
    $return['additional_resources'] = $additional_resources;
  }

  $added = TRUE;
  return $return;
}

/**
 * Return a CSS array for the theme.
 *
 * So far only one skin is acceptable because the HTML is different.
 * Keeping it for the future..
 *
 * "See your future, be your future. May. make. make it. Make your future Danny"
 *
 * @return array
 *   CSS array.
 */
function _jplayer_get_css($skin) {
  $return = array();
  $opts = array(
    'type' => 'file',
    'group' => CSS_DEFAULT,
  );

  if ($skin) {
    $path = drupal_get_path('module', 'jplayer');
    $skindir = $path . '/theme/skin/' . $skin;
    $file = $skindir . '/css/' . $skin . '.css';
    if (file_exists($file)) {
      $return = array($file => $opts);
    }
    else {
      $skin = 'jplayer.' . $skin;
      $file = $skindir . '/css/' . $skin . '.css';
      if (file_exists($file)) {
        $return = array($file => $opts);
      }
    }
  }
  return $return;
}

/**
 * Finds the JS file available in the libraries directory.
 *
 * @return string|bool
 *   Full file path or FALSE on failure.
 */
function _jplayer_get_js() {
  $path = libraries_get_path('jplayer', FALSE);
  $player_files = array(
    #'min'   => '/jquery.jplayer.min.js',
    'full' => '/jquery.jplayer.js',
  );

  // Check main library directory.
  foreach ($player_files as $type => $file) {
    $return = $path . $file;
    if (file_exists($return)) {
      return $return;
    }
  }

  // If they just unzipped the dl, the file is in the dist/jplayer folder.
  $path .= '/dist/jplayer';
  foreach ($player_files as $file) {
    $return = $path . $file;
    if (file_exists($return)) {
      return $return;
    }
  }
  return FALSE;
}

/**
 * Locates SWF file.
 *
 * @return string
 *   SWF file path.
 */
function _jplayer_get_swf() {
  $path = libraries_get_path('jplayer');
  $file = '/jquery.jplayer.swf';
  $full = $path . $file;
  if (!file_exists($full)) {
    $path .= '/dist/jplayer';
    $dist = $path . $file;
    if (file_exists($dist)) {
      return $dist;
    }
  }
  return $full;
}

/**
 *
 *
 * @return array
 */
function _jplayer_get_skin_plugins() {
  ctools_include('plugins');
  $skin_plugins = ctools_get_plugins('jplayer', 'jplayer_skin');
  return $skin_plugins;
}

/**
 * Retrieve a given skin property.
 *
 * @param $skin
 * @param $property
 * @return mixed
 */
function _jplayer_get_skin_property($skin, $property) {
  $properties = &drupal_static(__FUNCTION__);
  if (!isset($properties)) {
    $properties = _jplayer_known_skins();
  }

  $skin_properties = $properties[$skin];
  return $skin_properties[$property];
}

/**
 * Return information about available skins.
 *
 * @return array
 *  Array of arrays describing available skins.
 */
function _jplayer_known_skins() {
  $skins = array();
  $plugins = _jplayer_get_skin_plugins();
  foreach($plugins as $plugin) {
    $func = ctools_plugin_get_function($plugin, 'skin definition');
    if (is_callable($func)) {
      $skins = $skins + $func($plugin);
    }
  }
  return $skins;
}


function OLD_jplayer_known_skins() {
  $path = drupal_get_path('module', 'jplayer');

  $skins = array(

    'bluemonday' => array(
      'label' => t('Blue Monday'),
      'description' => t('Standard jPlayer skin, a blue and grey rectangular layout.'),
      'location' => $path . '/theme/skin/blue.monday',
      // Template html by player mode.
      'templates' => array(
        'audio' => array(
          'jplayer.blue.monday.audio.playlist.tpl.php',
        ),
        'video' => array(
          'jplayer.blue.monday.video.playlist.tpl.php',
        ),
      ),
      // Array of css files to be included.
      'css' => array(
        'css/jplayer.blue.monday.min.css',
      ),
      // this theme copes with all varieties of player in one theme call.
      'theme' => 'jplayer_bluemonday',
    ),

    'pinkflag' => array(
      'label' => t('Pink Flag'),
      'description' => t('Standard jPlayer skin, a pink and purple square arrangement.'),
      'location' => $path . '/theme/skin/pink.flag',
      'templates' => array(
        'audio' => array(
          'jplayer.pink.flag.audio.playlist.tpl.php',
        ),
        'video' => array(
          'jplayer.pink.flag.video.playlist.tpl.php',
        ),
      ),
      // Array of css files to be included.
      'css' => array(
        'css/jplayer.blue.flag.min.css',
      ),
      // this theme uses varieties of theme to cover the modes.
      'theme' => array(
        'audio-single' => 'jplayer_pinkflag_audio_single',
        'audio-playlist' => 'jplayer_pinkflag_audio_playlist',
        'audio-stream' => 'jplayer_pinkflag_audio_single',
        'video-single' => 'jplayer_pinkflag',
        'video-playlist' => 'jplayer_pinkflag',
      ),
    ),
    
    'blueflag' => array(
      'label' => t('Blue Flag'),
      'description' => t('Modified Pink Flag jPlayer skin, a blue and torquise square arrangement.'),
      'location' => $path . '/theme/skin/blue.flag',
      'templates' => array(
        'audio' => array(
          'jplayer.blue.flag.audio.playlist.tpl.php',
        ),
        'video' => array(
          'jplayer.blue.flag.video.playlist.tpl.php',
        ),
      ),
      // Array of css files to be included.
      'css' => array(
        'css/jplayer.blue.flag.min.css',
      ),
      // this theme uses three varieties of theme to cover the modes.
      'theme' => array(
        'audio-single' => 'jplayer_blueflag_audio_single',
        'audio-playlist' => 'jplayer_blueflag_audio_playlist',
        'audio-stream' => 'jplayer_blueflag_audio_single',
        'video-single' => 'jplayer_blueflag',
        'video-playlist' => 'jplayer_blueflag',
      ),
    )
  );
  return $skins;
}
